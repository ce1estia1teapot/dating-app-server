# This file defines the multi-container application stack for your "Flint" dating app.
# It uses Podman Compose to build, link, and run the services together.

services:
  # The 'web' service represents the Python/Django backend.
  web:
    # Build the image using the Dockerfile located in the current directory.
    build:
      context: .
      dockerfile: Dockerfile
    # image: localhost/dating-server:1

    # Mount the backend source code as a volume for live-reloading during development.
    # This maps the local 'backend' directory into the container's working directory.
    volumes:
      - ./:/usr/src/app/backend
    
    # Expose the backend's port to the host machine.
    # The left side (8000) is the host port; the right side (8000) is the container port.
    ports:
      - "8000:8000"
    
    # Define environment variables for the database connection.
    environment:
      - DB_HOST=db
      - DB_NAME=flintdb
      - DB_USER=admin
      - DB_PASSWORD=admin_pass
    networks:
      - default
    
    # Ensure the database service starts before the web service.
    depends_on:
      - db

  # The 'db' service for the PostgreSQL database.
  db:
    # Use the official PostgreSQL image.
    image: postgres:15-alpine
    
    # Store the database data in a named volume to ensure persistence.
    # The data will not be lost if the container is stopped or removed.
    volumes:
      - flint_db_data:/var/lib/postgresql/data1
    ports:
      - "5432:5432"    
    # Set environment variables for the database. These must match what's in the 'web' service.
    environment:
      - POSTGRES_DB=flintdb
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin_pass
    networks:
      - default
      
# This section defines the named volume for the database.
volumes:
  flint_db_data:

# Defining inter-container network
networks:
  default:
    driver: bridge